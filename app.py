# app.py
import streamlit as st
import requests
from PIL import Image
import io
import base64

st.set_page_config(page_title="EuroSAT –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", page_icon="üõ∞Ô∏è", layout="wide")

BACKEND_URL = "http://localhost:8080"

# Session state
if 'results' not in st.session_state:
    st.session_state.results = None
if 'result_image' not in st.session_state:
    st.session_state.result_image = None
if 'channels_count' not in st.session_state:
    st.session_state.channels_count = 3
if 'preview_image' not in st.session_state:
    st.session_state.preview_image = None
if 'selected_channels' not in st.session_state:
    st.session_state.selected_channels = None

st.title("üõ∞Ô∏è EuroSAT –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .stButton > button { width: 100%; }
    .legend-item { display: flex; align-items: center; margin: 0.3rem 0; font-size: 0.85rem; }
    .color-box { width: 16px; height: 16px; border-radius: 2px; margin-right: 8px; display: inline-block; }
</style>
""", unsafe_allow_html=True)

# –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞ –≤ sidebar
with st.sidebar:
    st.header("üé® –õ–µ–≥–µ–Ω–¥–∞")
    st.markdown("""
    <div style="margin-top: 0.5rem;">
        <div class="legend-item">
            <span class="color-box" style="background: rgb(255,255,0);"></span>
            <span>üåæ –û–¥–Ω–æ–ª–µ—Ç–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã</span>
        </div>
        <div class="legend-item">
            <span class="color-box" style="background: rgb(34,139,34);"></span>
            <span>üå≤ –õ–µ—Å</span>
        </div>
        <div class="legend-item">
            <span class="color-box" style="background: rgb(124,252,0);"></span>
            <span>üåø –¢—Ä–∞–≤—ã</span>
        </div>
        <div class="legend-item">
            <span class="color-box" style="background: rgb(128,128,128);"></span>
            <span>üõ£Ô∏è –î–æ—Ä–æ–≥–∏</span>
        </div>
        <div class="legend-item">
            <span class="color-box" style="background: rgb(139,69,19);"></span>
            <span>üè≠ –ü—Ä–æ–º–∑–æ–Ω—ã</span>
        </div>
        <div class="legend-item">
            <span class="color-box" style="background: rgb(152,251,152);"></span>
            <span>üå± –ü–∞—Å—Ç–±–∏—â–∞</span>
        </div>
        <div class="legend-item">
            <span class="color-box" style="background: rgb(255,140,0);"></span>
            <span>üçá –ú–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã</span>
        </div>
        <div class="legend-item">
            <span class="color-box" style="background: rgb(255,0,0);"></span>
            <span>üèòÔ∏è –ñ–∏–ª—ã–µ —Ä–∞–π–æ–Ω—ã</span>
        </div>
        <div class="legend-item">
            <span class="color-box" style="background: rgb(0,0,255);"></span>
            <span>üèûÔ∏è –†–µ–∫–∏</span>
        </div>
        <div class="legend-item">
            <span class="color-box" style="background: rgb(0,191,255);"></span>
            <span>üåä –í–æ–¥–æ—ë–º—ã</span>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    st.markdown("""
    <small>
    <b>–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</b><br>
    –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ EuroSAT<br><br>
    üöÄ TensorFlow & FastAPI
    </small>
    """, unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞—Å—Ç—Ä–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
    type=["tif", "tiff", "jpg", "png", "jpeg"],
    help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: GeoTIFF, TIFF, JPG, PNG"
)

if uploaded_file:
    file_bytes = uploaded_file.read()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    with st.spinner("–ê–Ω–∞–ª–∏–∑..."):
        try:
            resp = requests.post(f"{BACKEND_URL}/check_channels/", files={"file": (uploaded_file.name, file_bytes)})
            if resp.status_code == 200:
                st.session_state.channels_count = resp.json()["channels"]
        except:
            st.session_state.channels_count = 3
    
    # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º—É–ª—å—Ç–∏—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö
    channels = None
    if st.session_state.channels_count > 3:
        st.info(f"üîç –ú—É–ª—å—Ç–∏—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫ ({st.session_state.channels_count} –∫–∞–Ω–∞–ª–æ–≤)")
        
        with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", expanded=True):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                cols = st.columns(3)
                with cols[0]:
                    r = st.number_input('R', 1, st.session_state.channels_count, 4)
                with cols[1]:
                    g = st.number_input('G', 1, st.session_state.channels_count, 3)
                with cols[2]:
                    b = st.number_input('B', 1, st.session_state.channels_count, 2)
                channels = f"{r},{g},{b}"
            
            with col2:
                preset = st.selectbox("–ü—Ä–µ—Å–µ—Ç", ["Custom", "4,3,2", "8,4,3"])
                if preset != "Custom":
                    st.info(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å: {preset}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–≤—å—é"):
                st.session_state.selected_channels = channels
                with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é..."):
                    try:
                        resp = requests.post(
                            f"{BACKEND_URL}/get_preview/",
                            files={"file": (uploaded_file.name, file_bytes)},
                            params={"channels": channels}
                        )
                        if resp.status_code == 200:
                            data = resp.json()
                            preview_bytes = base64.b64decode(data['preview'])
                            st.session_state.preview_image = Image.open(io.BytesIO(preview_bytes))
                            st.success("‚úÖ")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª
        if st.session_state.preview_image and st.session_state.channels_count > 3:
            st.image(st.session_state.preview_image, use_column_width=True)
            st.caption(f"RGB –∫–æ–º–ø–æ–∑–∏—Ç: {st.session_state.selected_channels}")
        else:
            try:
                img = Image.open(io.BytesIO(file_bytes)).convert('RGB')
                st.image(img, use_column_width=True)
                st.caption(f"–†–∞–∑–º–µ—Ä: {img.width}√ó{img.height}")
            except:
                st.info("–ü—Ä–µ–≤—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                if st.session_state.channels_count > 3:
                    st.info("üí° –ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–≤—å—é'")
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    if st.button("üöÄ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True):
        progress = st.progress(0)
        status = st.empty()
        
        with st.spinner("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è..."):
            try:
                status.text("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                progress.progress(25)
                
                files = {"file": (uploaded_file.name, file_bytes)}
                params = {"channels": channels} if channels else {}
                
                resp = requests.post(f"{BACKEND_URL}/classify_all/", files=files, params=params, timeout=300)
                
                progress.progress(75)
                status.text("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
                
                if resp.status_code == 200:
                    data = resp.json()
                    st.session_state.results = data
                    
                    viz_bytes = base64.b64decode(data['visualization'])
                    st.session_state.result_image = Image.open(io.BytesIO(viz_bytes))
                    
                    progress.progress(100)
                    st.success("‚úÖ –ì–æ—Ç–æ–≤–æ!")
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {resp.status_code}")
            except Exception as e:
                st.error(f"‚ùå {str(e)}")
            finally:
                progress.empty()
                status.empty()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if st.session_state.result_image:
        with col2:
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
            st.image(st.session_state.result_image, use_column_width=True)
            st.caption("üí° –õ–µ–≥–µ–Ω–¥–∞ —Å–ª–µ–≤–∞")
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
    if st.session_state.results:
        st.markdown("---")
        st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        cols = st.columns(3)
        
        with cols[0]:
            viz = base64.b64decode(st.session_state.results['visualization'])
            st.download_button("üñºÔ∏è PNG", viz, f"{uploaded_file.name.split('.')[0]}_class.png", "image/png")
        
        with cols[1]:
            tif = base64.b64decode(st.session_state.results['geotiff'])
            st.download_button("üó∫Ô∏è GeoTIFF", tif, f"{uploaded_file.name.split('.')[0]}_class.tif", "image/tiff")
        
        with cols[2]:
            st.download_button("üìç GeoJSON", st.session_state.results['geojson'], 
                             f"{uploaded_file.name.split('.')[0]}_class.geojson", "application/json")
